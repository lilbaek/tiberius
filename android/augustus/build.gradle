apply plugin: 'com.android.application'
// apply plugin: 'com.github.triplet.play'

task getVersion {
    def cmakeFile = rootProject.file("../CMakeLists.txt").text
    def versionMajor = (cmakeFile =~ /set\(PROJECT_VERSION_MAJOR (\d+)\)/)[0][1].toInteger()
    def versionMinor = (cmakeFile =~ /set\(PROJECT_VERSION_MINOR (\d+)\)/)[0][1].toInteger()
    def versionPatch = (cmakeFile =~ /set\(PROJECT_VERSION_PATCH (\d+)\)/)[0][1].toInteger()
    def isRelease = (cmakeFile =~ /set\(IS_RELEASE_VERSION ([A-Z]+)\)/)[0][1].toBoolean()

    def versionTweak = 0
    def versionDetail
    if (isRelease) {
        versionDetail = ""
    } else {
        try {
            def stdout = new ByteArrayOutputStream()
            def stderr = new ByteArrayOutputStream()

            def tweakResult = exec {
                commandLine "git", "rev-list", "--count", "HEAD", "^tags/v${versionMajor}.${versionMinor}.${versionPatch}"
                workingDir = "../.."
                standardOutput = stdout
                errorOutput = stderr
                ignoreExitValue = true
            }.exitValue

            versionTweak = stdout.toString().trim().toInteger()
            stdout.reset()

            def lastCommitResult = exec {
                commandLine "git", "rev-parse", "--short", "--verify", "HEAD"
                workingDir "../.."
                standardOutput = stdout
                errorOutput = stderr
                ignoreExitValue = true
            }.exitValue
            def versionCommit = stdout.toString().trim()

            def isDirty = exec {
                commandLine "git", "diff-index", "--quiet", "HEAD", "--"
                workingDir "../.."
                ignoreExitValue = true
            }.exitValue

            versionDetail = ""
            if (tweakResult == 0) {
                versionDetail += ".$versionTweak"
            }
            if (lastCommitResult == 0) {
                versionDetail += "-$versionCommit"
            }
            if (isDirty) {
                versionDetail += "-dirty"
            }
        } catch (ignored) {
            versionDetail = " unknown development version"
        }
    }

    def versionNumber = "${versionMajor}.${versionMinor}.${versionPatch}"

    ext.versionCode = versionMajor * 10000000 + versionMinor * 100000 + versionPatch * 1000 + versionTweak
    ext.versionName = versionNumber + versionDetail
}

android {
    compileSdkVersion 33
    buildToolsVersion "33.0.1"
    ndkVersion "25.1.8937393"

    defaultConfig {
        applicationId "com.github.Keriew.tiberius"
        minSdkVersion 21
        targetSdkVersion 33

        versionName getVersion.versionName
        versionCode getVersion.versionCode

        externalNativeBuild {
            cmake {
                version "3.22.1"
                arguments "-DTARGET_PLATFORM=android", "-DSYSTEM_LIBS=OFF","-DANDROID_STL=none"
            }
        }
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        sourceSets {
            main.res.srcDirs += '../../res/android'
            if (file('../../res/packed_assets').exists()) {
                println 'Using packed assets'
                main.assets.srcDirs += '../../res/packed_assets'
            } else {
                println 'Packed assets not found. Using regular assets'
                main.assets.srcDirs += '../../res/assets'
            }
        }
    }
    buildFeatures {
        prefab true
    }
    signingConfigs {
        release {
            def isCI = System.getenv("CI") == "true"
            if (isCI) {
                storeFile file("../tiberius.keystore")
                storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
                keyAlias "tiberius"
                keyPassword System.getenv("ANDROID_KEYSTORE_KEY_PASSWORD")
            }
        }
    }
    buildTypes {
        debug {
            ext.alwaysUpdateBuildId = false
            applicationIdSuffix ".debug"
            externalNativeBuild.cmake.arguments += "-DDRAW_FPS=1"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    externalNativeBuild {
        cmake {
            version "3.22.1"
            path "../../CMakeLists.txt"
        }
    }
    namespace 'com.github.Keriew.tiberius'
}

/** play {
    serviceAccountCredentials.set(file("../play-publisher.json"))
} **/

repositories {
    google()
    mavenCentral()
}

dependencies {
    implementation project(':SDL2')
    implementation 'androidx.appcompat:appcompat:1.5.1'
}
